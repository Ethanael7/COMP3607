import org.junit.jupiter.api.*;
import java.io.*;
import java.nio.file.*;
import java.util.zip.*;

import static org.junit.jupiter.api.Assertions.*;

public class FileExtractorTest {

    private static final String TEST_ZIP_PATH = "test.zip";
    private static final String OUTPUT_DIRECTORY = "extracted_files";
    
    
    @BeforeEach
    void setUp() throws IOException {
        createTestZipFile();
    }

    // Clean up after test
    @AfterEach
    void tearDown() throws IOException {
        // Delete the output directory and test ZIP file after each test
        deleteDirectory(new File(OUTPUT_DIRECTORY));
        Files.deleteIfExists(Paths.get(TEST_ZIP_PATH));
    }

    // Helper method to create a sample test ZIP file
    private void createTestZipFile() throws IOException {
        try (ZipOutputStream zipOut = new ZipOutputStream(new FileOutputStream(TEST_ZIP_PATH))) {
            // Create and add Java files to the ZIP file
            addFileToZip(zipOut, "TestClass1.java", "public class TestClass1 { }");
            addFileToZip(zipOut, "TestClass2.java", "public class TestClass2 { }");
        }
    }

    // Helper method to add a file to the ZIP
    private void addFileToZip(ZipOutputStream zipOut, String fileName, String fileContent) throws IOException {
        ZipEntry entry = new ZipEntry(fileName);
        zipOut.putNextEntry(entry);
        zipOut.write(fileContent.getBytes());
        zipOut.closeEntry();
    }

    // Helper method to delete a directory and its contents
    private void deleteDirectory(File directory) throws IOException {
        if (directory.exists()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isDirectory()) {
                        deleteDirectory(file);
                    } else {
                        file.delete();
                    }
                }
            }
            directory.delete();
        }
    }

    // Test to ensure FileExtractor works as expected
    @Test
    void testExtractZipFile() throws IOException {
        // Extract the ZIP file using FileExtractor
        FileExtractor.extractZip(TEST_ZIP_PATH, OUTPUT_DIRECTORY);

        // Check if the extracted files exist
        assertTrue(new File(OUTPUT_DIRECTORY + "/TestClass1.java").exists(), "TestClass1.java should be extracted");
        assertTrue(new File(OUTPUT_DIRECTORY + "/TestClass2.java").exists(), "TestClass2.java should be extracted");
    }

    // Test to check if the extracted files are valid Java files (basic validation)
    @Test
    void testExtractedJavaFiles() throws IOException {
        // Extract the ZIP file using FileExtractor
        FileExtractor.extractZip(TEST_ZIP_PATH, OUTPUT_DIRECTORY);

        // Validate that the files are Java files (basic check)
        File extractedFile1 = new File(OUTPUT_DIRECTORY + "/TestClass1.java");
        File extractedFile2 = new File(OUTPUT_DIRECTORY + "/TestClass2.java");

        assertTrue(extractedFile1.exists(), "TestClass1.java should be extracted");
        assertTrue(extractedFile2.exists(), "TestClass2.java should be extracted");

        
        assertTrue(extractedFile1.length() > 0, "TestClass1.java should not be empty");
        assertTrue(extractedFile2.length() > 0, "TestClass2.java should not be empty");
    }

  
    @Test
    void testEmptyZipFile() {
       
        try (ZipOutputStream zipOut = new ZipOutputStream(new FileOutputStream("empty.zip"))) {
            
        } catch (IOException e) {
            fail("Failed to create empty ZIP file");
        }

        
        assertThrows(IOException.class, () -> {
            FileExtractor.extractZip("empty.zip", OUTPUT_DIRECTORY);
        }, "Extracting an empty ZIP file should throw an exception");
    }
}
